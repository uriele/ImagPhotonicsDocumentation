var documenterSearchIndex = {"docs":
[{"location":"release-notes/","page":"-","title":"-","text":"CurrentModule = ImagPhotonics\nEditURL = \"https://github.com/uriele/ImagPhotonics/blob/master/CHANGELOG.md\"","category":"page"},{"location":"man/examples/#Guide","page":"Guide","title":"Guide","text":"","category":"section"},{"location":"lib/functions/#Public","page":"Public","title":"Public","text":"","category":"section"},{"location":"lib/functions/","page":"Public","title":"Public","text":"Modules = [ImagPhotonics]","category":"page"},{"location":"lib/functions/#ImagPhotonics.ONEFORTH","page":"Public","title":"ImagPhotonics.ONEFORTH","text":"A constant representing one-fourth (0.25).\n\n\n\n\n\n","category":"constant"},{"location":"lib/functions/#ImagPhotonics.ONEHALF","page":"Public","title":"ImagPhotonics.ONEHALF","text":"A constant representing one-half (0.5).\n\n\n\n\n\n","category":"constant"},{"location":"lib/functions/#ImagPhotonics.AbstractComponent","page":"Public","title":"ImagPhotonics.AbstractComponent","text":"abstract type AbstractComponent{T<:Unitful.Quantity} end\n\nRepresents a generic photonic component type with dimensions and units specified in the type signature. The dimensions and unit cannot be an empty set.\n\nThe type parameter T<:Unitful.Quantity. The layer type is used for representation in the GDSII files, and the datatype is used to define the material parameters.\n\nSee also Waveguide, Taper, Device, IIDD\n\n\n\n\n\n","category":"type"},{"location":"lib/functions/#ImagPhotonics.AbstractConnectorFunction","page":"Public","title":"ImagPhotonics.AbstractConnectorFunction","text":"abstract type AbstractConnectorFunction<:AbstractIsoparametricFunction end\n\nRepresents a generic connector function type, which is a subtype of AbstractIsoparametricFunction. It is used to define the connection between photonic components.\n\n\n\n\n\n","category":"type"},{"location":"lib/functions/#ImagPhotonics.AbstractIsoparametricFunction","page":"Public","title":"ImagPhotonics.AbstractIsoparametricFunction","text":"abstract type AbstractIsoparametricFunction end\n\nRepresents a generic isoparametric function type, with the order defined in the type signature. The order is allowed to be an empty set, in which case a default linear isoparametric function is returned.\n\n\n\n\n\n","category":"type"},{"location":"lib/functions/#ImagPhotonics.Connector_Type","page":"Public","title":"ImagPhotonics.Connector_Type","text":"An enumeration representing the connector type for a photonic device.\n\nC_INPUT: Indicates the port is an input port.\nC_OUTPUT: Indicates the port is an output port.\n\n\n\n\n\n","category":"type"},{"location":"lib/functions/#ImagPhotonics.Device","page":"Public","title":"ImagPhotonics.Device","text":"mutable struct Device\n\nA mutable struct representing a 2D photonic device. It inherits from AbstractComponent. It generated the photonic structure used in the optimization process.\n\nThe type parameter T<:Unitful.Quantity.    \n\nFields\n\nwidth::T                                                       : Width of the device.\nlength::T                                                      : Length of the device.\ncurvature_left::T                                              : Curvature on the left side of the device.\ncurvature_right::T                                             : Curvature on the right side of the device.\ncurvature_up::T                                                : Curvature on the top side of the device.\ncurvature_down::T                                              : Curvature on the bottom side of the device.\nnumber_waveguides::NTuple{2,Union{Int,Vector{Int}}}            : Tuple containing the number of input and output waveguides.\nlocation::NTuple{2,Union{LocationType,Vector{LocationType}}} : Tuple containing the location of input and output waveguides.\npoints::Array{T, 2}                                            : The array representing the device points.\npin::Vector{Port}                                              : The vector representing the input ports of the device.\npout::Vector{Port}                                             : The vector representing the output ports of the device.\nshape_function::ShapeFunction2D                                : The shape function used for the device.\nlayer::Int                                                     : The layer for the device.\ndatatype::Int                                                  : The datatype for the device.\n\nConstructor\n\nDevice(length, width; number_waveguides=(4,4),spacing=(5.0u\"μm\",5.0u\"μm\"),\nlocation=(Location_Type(0),Location_Type(1)), \ncurvature_left=0.0u\"μm\", curvature_right=0.0u\"μm\", \ncurvature_up  =0.0u\"μm\", curvature_down =0.0u\"μm\",\nlayer=0, datatype=1)\n\nGenerates a device with number_waveguides input and output for gdsii files and photonic computations. \n\nThe length and width are provided by the user. The waveguides are located at location and are separated by spacing. The first and second entry of number_waveguides,location, and spacing represent the input and output respectively. The curvature parameters curvature_down,curvature_up,curvature_left,curvature_right represent the shift from the linearity in the middle of each respective edge, if all 4 parameters are 0, the device is a rectangle.\n\nThe layer type is used for representation in the gdsii files and the datatype is used to define the material parameters.\n\nArguments\n\nlength              :: T\nwidth               :: T \nnumber_waveguides   :: NTuple{2,Union{Int,Vector{Int}}} \nspacing             :: NTuple{2,Union{T,Vector{T}}}         \nlocation            :: NTuple{2,Union{Location_Type,Vector{Location_Type}}}         \ncurvature_left      :: T \ncurvature_right     :: T \ncurvature_up        :: T \ncurvature_down      :: T\nlayer               :: Int\ndatatype            :: Int\n\nExamples\n\njulia> d=Device(10.0u\"μm\",20.0u\"μm\")\nPhotonic Device\n---------------\nlength: 10.0 μm\nwidth: 20.0 μm\npᵢₙ  : left-4\npₒᵤₜ  : right-4\ncurvature left: 0.0 μm\ncurvature right: 0.0 μm\ncurvature up: 0.0 μm\ncurvature down: 0.0 μm\nlayer: 0\nmaterial: 1\nShape functions: N₁, N₂, N₃, N₄\n\n\n\n\n\n","category":"type"},{"location":"lib/functions/#ImagPhotonics.Location_Type","page":"Public","title":"ImagPhotonics.Location_Type","text":"An enumeration representing the location type of a port on a photonic device.\n\nLOC_LEFT: Indicates the port is located on the left side of the device.\nLOC_RIGHT: Indicates the port is located on the right side of the device.\nLOC_UP: Indicates the port is located on the upper side of the device.\nLOC_DOWN: Indicates the port is located on the lower side of the device.\n\n\n\n\n\n","category":"type"},{"location":"lib/functions/#ImagPhotonics.Monitor_Type","page":"Public","title":"ImagPhotonics.Monitor_Type","text":"An enumeration representing the monitor type for a photonic device.\n\nGENERIC: Indicates a generic monitor.\nOPTIMIZATION: Indicates an optimization monitor.\nSOURCE: Indicates a source monitor.\n\n\n\n\n\n","category":"type"},{"location":"lib/functions/#ImagPhotonics.PIC_IIDD","page":"Public","title":"ImagPhotonics.PIC_IIDD","text":"...\n\n\n\n\n\n","category":"type"},{"location":"lib/functions/#ImagPhotonics.PhotonicComponent_Type","page":"Public","title":"ImagPhotonics.PhotonicComponent_Type","text":"An enumeration representing various photonic component types.\n\nDEVICE: Indicates a generic photonic device.\nWAVEGUIDE: Indicates a waveguide component.\nTAPER: Indicates a taper component.\nTERMINATION: Indicates a termination component.\nRING: Indicates a ring resonator component.\n\n\n\n\n\n","category":"type"},{"location":"lib/functions/#ImagPhotonics.Port","page":"Public","title":"ImagPhotonics.Port","text":"struct Port\n\nRepresents a port location on an AbstractComponent in element units ξ and η.\n\nFields:\n\nx: Real number representing the x-coordinate of the port location.\ny: Real number representing the y-coordinate of the port location.\n\n\n\n\n\n","category":"type"},{"location":"lib/functions/#ImagPhotonics.ShapeFunction2D-Tuple{Any, Any, Any}","page":"Public","title":"ImagPhotonics.ShapeFunction2D","text":"(sf::ShapeFunction2D)(ξ, η, points)\n\nReturns the value in the xy space, given the element coordinates ξ, η and the control points.\n\nEXAMPLE\n\njulia> points[0. 0.; 1. 0.; 1. 1.; 0. 1.]\n4×2 Matrix{Float64}:\n 0.0  0.0\n 1.0  0.0\n 1.0  1.0\n 0.0  1.0\n julia> sf=ShapeFunction2D(0,0,points);\n (0.5, 0.5)\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.Taper","page":"Public","title":"ImagPhotonics.Taper","text":"Taper{T} <: AbstractComponent{T}\n\nA concrete subtype of AbstractComponent representing a taper or termination for a waveguide in photonic devices.\n\nFields\n\nwidth_initial : Initial width of the taper\nwidth_final : Final width of the taper\nlength : Length of the taper\nm : Design parameter\npoints : Array of points representing the taper\npin : Input port\npout : Output port\nshape_function : TaperFunction object representing the shape of the taper\nlayer : Layer of the device\ndatatype : Datatype of the device\n\nConstructors\n\nTaper(;width_initial, width_final, length, m, layer, ComponentType, datatype, kwargs...)\n\nArguments\n\nwidth_initial::T=0.5u\"μm\" : Initial width of the taper\nwidth_final::T=1.0u\"μm\" : Final width of the taper\nlength::T=1.0u\"μm\" : Length of the taper\nm::Real=0.0 : Design parameter\nlayer::Int=0 : Layer of the device\nComponentType::PhotonicComponent_Type=TAPER : Type of the component (Taper or Termination)\ndatatype::Int=0 : Datatype of the device\nkwargs... : Additional keyword arguments for the TaperFunction constructor\n\nExamples\n\njulia> Taper()\n\nTaper\n---------------\nlength: 1.0 μm\ninitial width: 0.5 μm\nfinal width: 1.0 μm\npᵢₙ  : ImagPhotonics.Port(-1.0, 0.0)\npᵢₙ  : ImagPhotonics.Port(-1.0, 0.0)\npᵢₙ  : ImagPhotonics.Port(-1.0, 0.0)\npᵢₙ  : ImagPhotonics.Port(-1.0, 0.0)\npₒᵤₜ : ImagPhotonics.Port(-1.0, 0.0)\nlayer: 0\nmaterial: 268136720\n\njulia> Taper(ComponentType=TERMINATION)\n\n[ Info: width_final=0.0 μm, the structure is termination\nTermination\n---------------\nlength: 1.0 μm\nwidth: 0.5 μm\npᵢₙ  : ImagPhotonics.Port(-1.0, 0.0)\npᵢₙ  : ImagPhotonics.Port(-1.0, 0.0)\npᵢₙ  : ImagPhotonics.Port(-1.0, 0.0)\npᵢₙ  : ImagPhotonics.Port(-1.0, 0.0)\npₒᵤₜ : ImagPhotonics.Port(-1.0, 0.0)\nlayer: 0\nmaterial: 268158704\n\n\n\n\n\n","category":"type"},{"location":"lib/functions/#ImagPhotonics.TaperFunction","page":"Public","title":"ImagPhotonics.TaperFunction","text":"TaperFunction\n\nA concrete subtype of ImagPhotonics.AbstractConnectorFunction, representing a 2D shape function. ShapeFunction2D generates the basis functions Na, and its derivatives Naξ and Naη with respect to the element space ξ and η.A mutable struct representing a taper function for a photonic device.\n\nFields\n\nNa : Shape function\nNa_ξ : Tuple of functions representing the partial derivatives of Na with respect to ξ\nNa_η : Tuple of functions representing the partial derivatives of Na with respect to η\nAffinity : Affinity matrix used for affine transformations\n_rotation : Rotation angle\n_translation : Tuple representing translation along x and y\n_scale : Tuple representing scaling factors along x and y\n_mirror_x : Bool for mirroring along the x-axis\n_mirror_y : Bool for mirroring along the y-axis\n_operation_order : Array of transformation types representing the order of operations\n\nConstructor\n\nTaperFunction(L::Number, w₁::Number, w₂::Number; m = 1.0,\n\nrotation::Real=0, translation::Tuple{Real,Real}=(0.,0.), scale::Tuple{Real,Real}=(1.,1.), mirrorx::Bool=false, mirrory::Bool=false, operationorder=[AFFINETRANSLATION,AFFINEROTATION,AFFINESCALE,AFFINEMIRRORX,AFFINEMIRRORY])\n\nCreate a taper function, which is a parametric function that represents a tapered shape (e.g., a trapezoid) with linearly changing width along its length.\n\nArguments\n\nL: The length of the tapered shape.\nw₁: The width at the starting point (x = 0) of the tapered shape.\nw₂: The width at the end point (x = L) of the tapered shape.\nm: A power factor affecting the tapering shape (default: 1.0).\nrotation: Rotation angle in radians (default: 0).\ntranslation: Translation vector as a tuple (x, y) (default: (0.,0.)).\nscale: Scaling factor, either a single value or a tuple (xscale, yscale) (default: (1.,1.)).\nmirror_x: Reflection along the x-axis (true/false) (default: false).\nmirror_y: Reflection along the y-axis (true/false) (default: false).\noperation_order: An array specifying the order of transformations (default: [AFFINETRANSLATION, AFFINEROTATION, AFFINESCALE, AFFINEMIRRORX, AFFINEMIRROR_Y]).\n\nReturns\n\nA TaperFunction object representing the tapered shape with the specified properties.\n\n\n\n\n\n","category":"type"},{"location":"lib/functions/#ImagPhotonics.Transformation_Type","page":"Public","title":"ImagPhotonics.Transformation_Type","text":"An enumeration representing the transformation type for a photonic device.\n\nAFFINE_TRANSLATION: Indicates an affine translation transformation.\nAFFINE_ROTATION: Indicates an affine rotation transformation.\nAFFINE_SCALE: Indicates an affine scale transformation.\nAFFINE_MIRROR_X: Indicates an affine mirror transformation along the X axis.\nAFFINE_MIRROR_Y: Indicates an affine mirror transformation along the Y axis.\n\n\n\n\n\n","category":"type"},{"location":"lib/functions/#ImagPhotonics.Waveguide","page":"Public","title":"ImagPhotonics.Waveguide","text":"...\n\n\n\n\n\n","category":"type"},{"location":"lib/functions/#RefractiveIndex.RefractiveMaterial-Union{Tuple{T}, Tuple{String, RefractiveIndex.DispersionFormula}} where T<:Union{Float64, Unitful.Quantity}","page":"Public","title":"RefractiveIndex.RefractiveMaterial","text":"RefractiveIndex.RefractiveMaterial(name::String, dispersion::RefractiveIndex.DispersionFormula; λrange::Union{T,Tuple{T,T}} = 1.55u\"μm\", reference::String = \"\", comment::String = \"\", specs::Dict{Symbol, Any} = Dict{Symbol, Any}()) where T <: Union{Float64,Unitful.Quantity}\n\nCreates a RefractiveMaterial instance with the given name, dispersion formula, wavelength range, reference, comment, and additional specifications.\n\n#Arguments:\n\n-name::String                                   : Name of the refractive material. -dispersion::RefractiveIndex.DispersionFormula  : Dispersion formula of the refractive material. -λrange::Union{T,Tuple{T,T}}                    : Wavelength range of the refractive material. If a single value is provided, it is assumed to be the upper limit, and the lower limit is set to 0. Defaults to 1.55u\"μm. -reference::String                              : Reference information about the refractive material. Defaults to an empty string. -comment::String                              : Additional comments about the refractive material. Defaults to an empty string. -specs::Dict{Symbol, Any}                     : Additional specifications for the refractive material. Defaults to an empty dictionary. Returns:\n\nA RefractiveIndex.RefractiveMaterial instance with the specified arguments.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.add_custom_material-Tuple{String, RefractiveMaterial}","page":"Public","title":"ImagPhotonics.add_custom_material","text":"add_custom_material(key::String, material::RefractiveMaterial; custom_lib::CustomLib=CUSTOM_LIB) -> Nothing\n\nAdds a custom material to the custom library.\n\nArguments:\n\n-key::String: Key to associate with the custom material. -material::RefractiveMaterial: Custom material to be added to the library. -custom_lib::CustomLib: Custom library to add the material to. Defaults to CUSTOM_LIB.\n\nReturns:\n\nnothing.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.add_marker!-Union{Tuple{T}, Tuple{Any, Tuple{T, T}}} where T<:Real","page":"Public","title":"ImagPhotonics.add_marker!","text":"function addmarker!(cell, point::Tuple{T,T}; sizemarker::T=0.1) where T <: Real\n\nAdd a square marker with a specified size to the given GDSII cell at a specified point. The marker is placed on layer 999.\n\nArguments:\n\ncell: GDSII cell to which the marker will be added.\npoint: Tuple of real numbers representing the x and y coordinates of the center point of the marker.\nsize_marker: Optional real number specifying the side length of the square marker. Default is 0.1.\n\nReturns:\n\nThe modified GDSII cell with the added marker.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.affinity_matrix-Tuple{}","page":"Public","title":"ImagPhotonics.affinity_matrix","text":"affinity_matrix(;rotation, translation, scale, mirror_x, mirror_y, operation_order)\n\nGenerates an affinity matrix used for affine transformations.\n\nArguments\n\nrotation::Real=0 : Rotation angle\ntranslation::Tuple{Real,Real}=(0,0) : Tuple representing translation along x and y\nscale::Union{Real,Tuple{Real,Real}}=1 : Tuple representing scaling factors along x and y\nmirror_x::Bool=false : Bool for mirroring along the x-axis\nmirror_y::Bool=false : Bool for mirroring along the y-axis\noperation_order::Array{Transformation_Type}=[AFFINE_TRANSLATION, AFFINE_ROTATION, AFFINE_SCALE, AFFINE_MIRROR_X, AFFINE_MIRROR_Y] : Array of transformation types representing the order of operations\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.construct_device-Tuple{T} where T<:ImagPhotonics.AbstractComponent","page":"Public","title":"ImagPhotonics.construct_device","text":"constructdevice(device::Device; Nξ::Int=100, N_η::Int=100)\n\nConstructs a photonic device based on the given device object and returns a GDSTK cell object. The function takes the following arguments:\n\ndevice: A 2D photonic device object.\nN_ξ: Number of ξ points (default: 100).\nN_η: Number of η points (default: 100).\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.create_custom_material-Union{Tuple{T}, Tuple{String, T}} where T<:RefractiveIndex.DispersionFormula","page":"Public","title":"ImagPhotonics.create_custom_material","text":"create_custom_material(name::String, dispersion::T; custom_lib::CustomLib=CUSTOM_LIB) -> RefractiveMaterial where T <: RefractiveIndex.DispersionFormula\n\nCreates a custom material with the given name and dispersion formula and adds it to the custom library.\n\nArguments:\n\nname::String: Name of the custom material.\ndispersion::T: Dispersion formula of the custom material.\ncustom_lib::CustomLib: Custom library to add the material to. Defaults to CUSTOM_LIB.\n\nReturns:\n\nA RefractiveMaterial instance with the given name and dispersion formula.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.initialize_custom_lib-Tuple{String}","page":"Public","title":"ImagPhotonics.initialize_custom_lib","text":"initialize_custom_lib(custom_lib_path::String) -> CustomLib\n\nInitializes a custom library.\n\nArguments:\n\ncustom_lib_path::String: The path to the custom library file.\n\nReturns:\n\nA CustomLib instance with the given path and an empty dictionary if the file does not exist, or a dictionary containing the custom materials if the file exists.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.is_squarematrix-Tuple{Matrix}","page":"Public","title":"ImagPhotonics.is_squarematrix","text":"function is_squarematrix(A::Matrix)\n\nReturn true if the matrix A is square.\n\nExamples\n\nCopy code\njulia> is_squarematrix(Matrix(undef, 3, 2))\nfalse\n\njulia> is_squarematrix(Matrix(undef, 3, 3))\ntrue\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.load_custom_lib-Tuple{}","page":"Public","title":"ImagPhotonics.load_custom_lib","text":"loadcustomlib() -> Nothing Loads the custom library from the file.\n\nReturns:\n\nnothing.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.normal_to_device","page":"Public","title":"ImagPhotonics.normal_to_device","text":"normal_to_device(device::Device, port_number::Int=1, connector::Connector_Type=C_INPUT)\n\nComputes the normal vector to the surface of a 2D photonic device at the specified connection point.\n\nArguments:\n\ndevice: A 2D photonic device object (instance of Device).\nport_number: The port number to compute the normal vector for (default: 1). It should be within the range of input or output ports.\nconnector: The connector type, either CINPUT or COUTPUT (default: C_INPUT).\n\nReturns:\n\nA normal vector (as an array) to the surface at the specified connection point.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#ImagPhotonics.normalize-Tuple{Any}","page":"Public","title":"ImagPhotonics.normalize","text":"normalize(x::Unitful.AbstractQuantity)  normalize(x::Matrix{Unitful.AbstractQuantity})\n\nReturn a multiplicative identity for any x of type Unitful.AbstractType.\n\nExamples\n\n```julia-repl julia> normalize(1u\"m\") 1.0 m\n\njulia> normalize(Matrix{u\"m\"}(I, 2, 2)) 2×2 Matrix{Quantity{Float64, 𝐋, Unitful.FreeUnits{(m,), 𝐋, nothing}}}: 1.0 m  0.0 m 0.0 m  1.0 m\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.position_device_ports-Union{Tuple{T}, Tuple{T, T, T, Int64, ImagPhotonics.Location_Type}} where T<:Unitful.Quantity","page":"Public","title":"ImagPhotonics.position_device_ports","text":"position_device_ports(length::T, width::T, spacing::T, number::Int, location::Location_Type) where T <: Unitful.Quantity\n\nReturns an array of Port objects that represent the positions of waveguides  in the square element interval ξ×η ∈ [-1,1]×[-1,1]  on a 2D photonic device. The function takes the following arguments:\n\nlength: Length of the device.\nwidth: Width of the device.\nspacing: Spacing between the waveguides.\nnumber: Number of waveguides.\nlocation: Location of the waveguides on the device (LOCLEFT, LOCRIGHT, LOCUP, LOCDOWN).\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.remove_custom_material","page":"Public","title":"ImagPhotonics.remove_custom_material","text":"remove_custom_material(key::String, index::Union{Int, Nothing, typeof(ALL)}=nothing; custom_lib::CustomLib=CUSTOM_LIB) -> Nothing\n\nRemoves a custom material from the custom library.\n\nArguments:\n\n-key::String: Key associated with the custom material. -index::Union{Int, Nothing, typeof(ALL)}: Index of the custom material in the case of a vector of materials. If nothing, an error will be raised if trying to remove an element from a vector of RefractiveMaterials. If ALL, all materials associated with the key will be removed. Defaults to nothing. -custom_lib::CustomLib: Custom library to remove the material from. Defaults to CUSTOM_LIB.\n\nReturns:\n\nnothing.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#ImagPhotonics.save_custom_lib-Tuple{}","page":"Public","title":"ImagPhotonics.save_custom_lib","text":"save_custom_lib() -> Nothing\n\nSaves the custom library to the file.\n\nReturns:\n\nnothing.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.update_affinity_matrix!-Tuple{ImagPhotonics.AbstractConnectorFunction}","page":"Public","title":"ImagPhotonics.update_affinity_matrix!","text":"update_affinity_matrix!(tf::AbstractConnectorFunction;\n    rotation::Union{Real,Nothing}=nothing,\n    translation::Union{Tuple{Real,Real},Nothing}=nothing,\n    scale::Union{Real,Tuple{Real,Real},Nothing}=nothing,\n    mirror_x::Union{Bool,Nothing}=nothing,\n    mirror_y::Union{Bool,Nothing}=nothing,\n    operation_order::Union{Array{Transformation_Type},Nothing}=nothing)\n\nUpdate the affinity matrix of a connector function with new transformation parameters. If a parameter is not provided, the existing value will be used.\n\nArguments\n\ntf: The connector function object.\nrotation: Rotation angle in radians (optional).\ntranslation: Translation vector as a tuple (x, y) (optional).\nscale: Scaling factor, either a single value or a tuple (xscale, yscale) (optional).\nmirror_x: Reflection along the x-axis (true/false) (optional).\nmirror_y: Reflection along the y-axis (true/false) (optional).\noperation_order: An array specifying the order of transformations (optional).\n\nReturns\n\nThe updated connector function object.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.update_custom_lib","page":"Public","title":"ImagPhotonics.update_custom_lib","text":"update_custom_lib(custom_lib_path::Union{Nothing,String}=nothing; custom_lib::Union{Nothing,Dict{String, Union{RefractiveMaterial, Vector{RefractiveMaterial}}}}=nothing) -> Nothing\n\nUpdates a custom library.\n\nArguments:\n\n-custom_lib_path::Union{Nothing,String}: Path to the custom library file. If nothing, reinitializes the DEFAULTCUSTOMLIBPATH. Defaults to nothing. customlib::Union{Nothing,Dict{String, Union{RefractiveMaterial, Vector{RefractiveMaterial}}}}: A custom library to be used. If nothing, the current library is used. Defaults to nothing.\n\nReturns:\n\nnothing\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#ImagPhotonics.update_shape_function-Union{Tuple{T}, Tuple{NTuple{4, Int64}, T, T}} where T","page":"Public","title":"ImagPhotonics.update_shape_function","text":"update_shape_function(order::NTuple{4,Int}, length_device::T, width_device::T) where T\n\nUpdates the shape function of a 2D photonic device based on the given order. The function takes the following arguments:\n\norder: A tuple containing the order of curvatures (down, left, up, right).\nlength_device: Length of the device.\nwidth_device: Width of the device.\n\nReturns a shape function and a matrix of points representing the updated shape function.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#ImagPhotonics.visualize_cell","page":"Public","title":"ImagPhotonics.visualize_cell","text":"visualize_cell(cell [,transform])\n\nVisualize the cell generated using the python package gdstk. The code only accepts object of type \n\ngdstk.polygons\ngdstk.paths\ngdstk.references\n\nThe object gdstk.curve is not supported and it has to be converted into a polygon first\n\n...\n\nArguments\n\ncell::PyObject: the library object containing all the design information\ntransform::Array{Real,2}: it is a 2x3 transformation matrix containg the translation information in the last column\n\n...\n\nExamples\n\njulia> visualize_cell(layout)\njulia> ϕ=π/2;\njulia> dx=1; dy=0;\njulia> transform= [cos(ϕ) -sin(ϕ) dx;sin(ϕ) cos(ϕ),dy]\n2x3 Array{Float64,2}:\n 0 -1  1\n 1  0  0\njulia> visualize_cell(layout,transform)\n\nSee also visualize_gds\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#ImagPhotonics.visualize_gds-Tuple{Any}","page":"Public","title":"ImagPhotonics.visualize_gds","text":"visualize_gds(layout)\n\nVisualize the layout generated using the python package gdstk. Layout is a PyObject <gdstk.Library> and it contains an array of cells PyObject <gdstk.Cells>\n\nArguments\n\nlayout::PyObject: the library object containing all the design information\n\nExamples\n\njulia> visualize_gds(layout)\n\nSee also visualize_cell\n\n\n\n\n\n","category":"method"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ImagPhotonics is a package that offers a comprehensive solution for designing, simulating, and optimizing photonic structures. With this package, you can:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Create photonic structures and connections between them.\nSimulate and optimize structures using FDFD, FDTD, and the Beam Propagation Method.\nExport the structures directly in GDSII format for fabrication.\nExtend the RefractiveIndex library to allow for custom materials and databases.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install ImagPhotonics, open your Julia REPL and enter the package manager mode by typing ]. Then, run the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"add ImagPhotonics","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ImagPhotonics is organized into several modules and functions, providing a variety of tools for different tasks.","category":"page"},{"location":"#Utility-Functions-(utility.jl)","page":"Home","title":"Utility Functions (utility.jl)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"normalize: Normalize units to simplify computations tasks\nλ_to_ω: transform between wavelengths and frequencies   \nω_to_λ: transform between frequencies and wavelengths","category":"page"},{"location":"#Wrapper-for-gdstk-(WrapperGdstk)","page":"Home","title":"Wrapper for gdstk (WrapperGdstk)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Create a wrapper for visualizing GDSII files and interact with them python libraries.","category":"page"},{"location":"","page":"Home","title":"Home","text":"visualize_cell: visualize a single cell of the gds file\nvisualize_gds: visualize the entire layout with a marker for the connections\nwrite_gds: save the layout in GDSII form\nread_gds: import an external gds file to be used in computation. For simplicity each element should be in a different cell.","category":"page"},{"location":"#Device-Components","page":"Home","title":"Device Components","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Device{T} <: AbstractComponent{T} : contains the main active device to be simulated. Additional information about the internal pattering should be provided separately.\nTaper{T} <: AbstractComponent{T} : contains the information about the taper and termination for the waveguides\nWaveguide{T} <: AbstractComponent{T}: main connection element\nCouplers{T} <: AbstractComponent{T} : creates a connector for two waveguides, the main parameter to control are the total lenght, length of the coupling and distance\nResonator{T} <: AbstractComponent{T} : creates ring resonators, the main parameters are width, diameter and distance.","category":"page"},{"location":"#Material-Properties","page":"Home","title":"Material Properties","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Extend the library RefractiveIndex to allow for custom libraries and materials.","category":"page"},{"location":"","page":"Home","title":"Home","text":"initialize_custom_lib: define CustomLib path\nsave_custom_lib: save current CustomLib\nload_custom_lib: load current CustomLib\nadd_custom_material: add new material to the CustomLib and return it to the user\nremove_custom_material: remove material from the CustomLib.","category":"page"},{"location":"#Physical-Problem","page":"Home","title":"Physical Problem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This module defines the grid discretization of the object and sets up the problem for various solvers such as Finite Difference Frequency Domain (FDFD), Finite Difference Time Domain (FDTD), or the Beam Propagation Method (BPM).","category":"page"},{"location":"","page":"Home","title":"Home","text":"ImagPhotonics can be used with other solvers or even with user-defined solvers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Refer to the individual function documentation for more details on their usage.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To start using ImagPhotonics, simply import the package and explore its various features:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ImagPhotonics","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more detailed information, consult the package documentation, which provides in-depth explanations and examples of how to use each function and module.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages =[\"lib/functions.md\"]\r\nDepth =1","category":"page"}]
}
